{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","transformPosition","gap","props","itemSize","handleClickNext","step","images","frameSize","infinite","setState","result","maxTransformPosition","length","handleClickPrev","this","animationDuration","carouselViewWidth","className","style","width","transform","transition","map","image","imageId","slice","lastIndexOf","src","alt","height","type","onClick","disabled","Component","App","handleOnChangeItemSize","event","currentTarget","value","handleOnChangeFrameSize","handleOnChangeStep","handleOnChangeAnimationDuration","handleOnChangeInfinite","checked","action","htmlFor","id","defaultValue","onChange","min","max","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.621e4580.chunk.js","sourcesContent":["import { Component } from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[];\n  itemSize: number;\n  frameSize: number;\n  step: number;\n  animationDuration: number;\n  infinite: boolean;\n};\n\ntype State = {\n  transformPosition: number,\n};\n\nexport class Carousel extends Component<Props, State> {\n  state: Readonly<State> = {\n    transformPosition: 0,\n  };\n\n  gap = 0.1 * this.props.itemSize;\n\n  handleClickNext = () => {\n    const {\n      step,\n      itemSize,\n      images,\n      frameSize,\n      infinite,\n    } = this.props;\n\n    this.setState(state => {\n      const result\n        = state.transformPosition - step * itemSize - step * this.gap;\n      const maxTransformPosition = -(itemSize * images.length\n        + this.gap * (images.length - frameSize) - frameSize * itemSize);\n\n      if (state.transformPosition === maxTransformPosition && infinite) {\n        return {\n          transformPosition: 0,\n        };\n      }\n\n      if (result < maxTransformPosition) {\n        return {\n          transformPosition: maxTransformPosition,\n        };\n      }\n\n      return {\n        transformPosition: result,\n      };\n    });\n  };\n\n  handleClickPrev = () => {\n    const {\n      step,\n      itemSize,\n      images,\n      frameSize,\n      infinite,\n    } = this.props;\n\n    const gap = 0.1 * itemSize;\n\n    this.setState(state => {\n      const result = state.transformPosition + step * itemSize + step * gap;\n      const maxTransformPosition = -(itemSize * images.length\n        + gap * (images.length - frameSize) - frameSize * itemSize);\n\n      if (state.transformPosition === 0 && infinite) {\n        return {\n          transformPosition: maxTransformPosition,\n        };\n      }\n\n      if (result > 0) {\n        return {\n          transformPosition: 0,\n        };\n      }\n\n      return {\n        transformPosition: result,\n      };\n    });\n  };\n\n  render() {\n    const {\n      images,\n      itemSize,\n      frameSize,\n      animationDuration,\n      infinite,\n    } = this.props;\n\n    const { transformPosition } = this.state;\n\n    const gap = 0.1 * itemSize;\n    const carouselViewWidth = itemSize * frameSize + (frameSize - 1) * gap;\n    const maxTransformPosition = -(itemSize * images.length\n      + gap * (images.length - frameSize) - frameSize * itemSize);\n\n    return (\n      <>\n        <div\n          className=\"Carousel\"\n          style={{ width: `${carouselViewWidth}px` }}\n        >\n          <ul\n            className=\"Carousel__list\"\n            style={{\n              transform: `translateX(${transformPosition}px)`,\n              transition: `${animationDuration}ms`,\n              gap: `${gap}px`,\n            }}\n          >\n            {images.map(image => {\n              const imageId = image.slice(\n                image.lastIndexOf('/') + 1, image.lastIndexOf('.'),\n              );\n\n              return (\n                <li key={imageId}>\n                  <img\n                    className=\"Carousel__img\"\n                    src={image}\n                    alt={imageId}\n                    height={itemSize}\n                    width={itemSize}\n                  />\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n\n        <div className=\"Carousel__buttons-container\">\n          <button\n            className=\"Carousel__button Carousel__button--prev\"\n            type=\"button\"\n            onClick={this.handleClickPrev}\n            disabled={infinite\n              ? false\n              : transformPosition >= 0}\n          >\n            <img\n              src=\"./img/arrow-left.png\"\n              alt=\"Next button\"\n              width=\"150\"\n            />\n          </button>\n\n          <button\n            className=\"Carousel__button Carousel__button--next\"\n            type=\"button\"\n            data-cy=\"next\"\n            onClick={this.handleClickNext}\n            disabled={infinite\n              ? false\n              : transformPosition <= maxTransformPosition}\n          >\n            <img\n              src=\"./img/arrow-right.png\"\n              alt=\"Next button\"\n              width=\"150\"\n            />\n          </button>\n        </div>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel';\n\ninterface State {\n  images: string[],\n  itemSize: number,\n  frameSize: number,\n  step: number,\n  animationDuration: number,\n  infinite: boolean,\n}\n\nclass App extends React.Component<{}, State> {\n  state: Readonly<State> = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    itemSize: 130,\n    frameSize: 3,\n    step: 3,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  handleOnChangeItemSize = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState(\n      { itemSize: +event.currentTarget.value },\n    );\n  };\n\n  handleOnChangeFrameSize = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState(\n      { frameSize: +event.currentTarget.value },\n    );\n  };\n\n  handleOnChangeStep = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState(\n      { step: +event.currentTarget.value },\n    );\n  };\n\n  handleOnChangeAnimationDuration\n  = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState(\n      { animationDuration: +event.currentTarget.value },\n    );\n  };\n\n  handleOnChangeInfinite\n  = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState(\n      { infinite: event.currentTarget.checked },\n    );\n  };\n\n  render() {\n    const {\n      images,\n      itemSize,\n      frameSize,\n      step,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1\n          className=\"App__title\"\n          data-cy=\"title\"\n        >\n          Carousel with\n          {` ${images.length} `}\n          images\n        </h1>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemSize={itemSize}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n\n        <form action=\"#\" className=\"App__form\">\n          <label htmlFor=\"itemId\">\n            {'Item Width '}\n            <input\n              id=\"itemId\"\n              type=\"number\"\n              defaultValue={itemSize}\n              onChange={this.handleOnChangeItemSize}\n              className=\"App__input\"\n            />\n          </label>\n\n          <label htmlFor=\"frameId\">\n            {'Frame Size '}\n            <input\n              id=\"frameId\"\n              type=\"number\"\n              defaultValue={frameSize}\n              onChange={this.handleOnChangeFrameSize}\n              min=\"1\"\n              max={`${images.length}`}\n              className=\"App__input\"\n            />\n          </label>\n\n          <label htmlFor=\"stepId\">\n            {'Step '}\n            <input\n              id=\"stepId\"\n              type=\"number\"\n              defaultValue={step}\n              onChange={this.handleOnChangeStep}\n              min=\"1\"\n              max={`${images.length}`}\n              className=\"App__input\"\n            />\n          </label>\n\n          <label>\n            {'Animation Duration '}\n            <input\n              type=\"number\"\n              defaultValue={animationDuration}\n              onChange={this.handleOnChangeAnimationDuration}\n              min=\"1000\"\n              max=\"10000\"\n              className=\"App__input\"\n            />\n          </label>\n\n          <label className=\"App__checkbox-label\">\n            {'Infinite '}\n            <input\n              type=\"checkbox\"\n              onChange={this.handleOnChangeInfinite}\n              className=\"App__checkbox\"\n            />\n            <span className=\"App__custom-checkbox\" />\n          </label>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}